REPORT ZZ_BPC_SMART_DATA_PACKAGE_DYN.
DATA :
  LS_PACKAGE      TYPE UJD_PACKAGES2,
  LT_PACKAGE_LIST TYPE STANDARD TABLE OF UJD_PACKAGES2,
  BEGIN OF LS_PROMPT,
    PERIOD  TYPE /BIC/OISM_PHASE,
    VERSION TYPE /BIC/OISM_VERSIO,
  END OF LS_PROMPT,
  LT_PROMPT LIKE HASHED TABLE OF LS_PROMPT WITH UNIQUE KEY PERIOD VERSION.
FIELD-SYMBOLS: <FS_PROMPT> LIKE LS_PROMPT.
DATA : LV_PROMPT_DYN TYPE STRING,
       LV_MESSAGE    TYPE STRING.

DATA LT_LIST_TAB TYPE TABLE OF ABAPLIST.
DATA LS_RESULT TYPE ZFSMT_T_SCPT_PRT.
*************************************************************************
**************PARAMETERS*************************************************
*IF Synchronous
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(60) TEXT-001 FOR FIELD P_SYNC.
PARAMETERS: P_SYNC TYPE UJ_BOOL DEFAULT UJ00_CS_BOOL-YES.
SELECTION-SCREEN END OF LINE.

*Package ID
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(60) TEXT-002 FOR FIELD P_PACKAG.
PARAMETERS: P_PACKAG TYPE UJ_PACKAGE_ID OBLIGATORY LOWER CASE.
SELECTION-SCREEN END OF LINE.

*Environment
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(60) TEXT-003 FOR FIELD P_APPSET.
PARAMETERS: P_APPSET TYPE UJ_APPSET_ID LOWER CASE.
SELECTION-SCREEN END OF LINE.

*Model ID
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(60) TEXT-004 FOR FIELD P_APPL.
PARAMETERS: P_APPL TYPE UJ_APPL_ID LOWER CASE.
SELECTION-SCREEN END OF LINE.

*User ID
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(60) TEXT-005 FOR FIELD P_USER.
PARAMETERS: P_USER TYPE UJ_USER_ID LOWER CASE.
SELECTION-SCREEN END OF LINE.

*Team ID
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(60) TEXT-006 FOR FIELD P_TEAM.
PARAMETERS: P_TEAM TYPE UJ_TEAM_ID LOWER CASE.
SELECTION-SCREEN END OF LINE.

*Package Group ID
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(60) TEXT-007 FOR FIELD P_GROUP.
PARAMETERS: P_GROUP TYPE UJ_PACK_GRP_ID LOWER CASE.
SELECTION-SCREEN END OF LINE.

*Answer Prompt
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(60) TEXT-008 FOR FIELD P_PROMPT.
PARAMETERS: P_PROMPT TYPE STRING LOWER CASE.
SELECTION-SCREEN END OF LINE.

*Schedule Info (XML)
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(60) TEXT-009 FOR FIELD P_SCHEDU.
PARAMETERS: P_SCHEDU TYPE STRING LOWER CASE DEFAULT
'<SCHEDULING><IMMEDIATE>Y</IMMEDIATE><STATE>0</STATE><PERIOD>N</PERIOD></SCHEDULING>'.
SELECTION-SCREEN END OF LINE.
*
*Raise message when package failed or canceled
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(60) TEXT-010 FOR FIELD P_MSG.
PARAMETERS: P_MSG TYPE UJ_BOOL DEFAULT UJ00_CS_BOOL-NO.
SELECTION-SCREEN END OF LINE.

*If answerprompt value is a file service path
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(60) TEXT-011 FOR FIELD P_FILE.
PARAMETERS: P_FILE TYPE UJ_BOOL DEFAULT UJ00_CS_BOOL-NO.
SELECTION-SCREEN END OF LINE.
*************************************************************************
**************INITIALIZATION*************************************************

INITIALIZATION.
  SELECT * INTO CORRESPONDING FIELDS OF TABLE LT_PACKAGE_LIST
    FROM UJD_PACKAGES2.
  SORT LT_PACKAGE_LIST BY APPSET_ID ASCENDING APP_ID ASCENDING.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_PACKAG.
  PERFORM F4_GET_PACKAGE
    CHANGING LS_PACKAGE.
  P_PACKAG = LS_PACKAGE-PACKAGE_ID.
  P_APPSET = LS_PACKAGE-APPSET_ID.
  P_APPL = LS_PACKAGE-APP_ID.
  P_TEAM = LS_PACKAGE-TEAM_ID.
  P_GROUP = LS_PACKAGE-GROUP_ID.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_PROMPT.
  PERFORM F4_GET_PROMPT.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_SCHEDU.
  PERFORM F4_GET_SCHEDULE.

START-OF-SELECTION.

END-OF-SELECTION.
*************************************************************************
**************LAUNCH MAIN INSTRUCTION************************************
  PERFORM SCOPE_TO_LAUNCH.


****************F4_GET_PACKAGE******************************************
FORM F4_GET_PACKAGE
  CHANGING L_LS_PACKAGE TYPE UJD_PACKAGES2.
  DATA:
    LT_DYNPFLD TYPE STANDARD TABLE OF DSELC,
    LS_DYNPFLD TYPE DSELC,
    LS_RETURN  TYPE DDSHRETVAL,
    LT_RETURN  TYPE STANDARD TABLE OF DDSHRETVAL.

  LS_DYNPFLD-FLDNAME = 'APPSET_ID'.
  LS_DYNPFLD-DYFLDNAME = 'UJD_PACKAGES2-APPSET_ID'.
  INSERT LS_DYNPFLD INTO TABLE LT_DYNPFLD.

  LS_DYNPFLD-FLDNAME = 'APP_ID'.
  LS_DYNPFLD-DYFLDNAME = 'UJD_PACKAGES2-APP_ID'.
  INSERT LS_DYNPFLD INTO TABLE LT_DYNPFLD.

  LS_DYNPFLD-FLDNAME = 'TEAM_ID'.
  LS_DYNPFLD-DYFLDNAME = 'UJD_PACKAGES2-TEAM_ID'.
  INSERT LS_DYNPFLD INTO TABLE LT_DYNPFLD.

  LS_DYNPFLD-FLDNAME = 'GROUP_ID'.
  LS_DYNPFLD-DYFLDNAME = 'UJD_PACKAGES2-GROUP_ID'.
  INSERT LS_DYNPFLD INTO TABLE LT_DYNPFLD.

  LS_DYNPFLD-FLDNAME = 'PACKAGE_ID'.
  LS_DYNPFLD-DYFLDNAME = 'UJD_PACKAGES2-PACKAGE_ID'.
  INSERT LS_DYNPFLD INTO TABLE LT_DYNPFLD.

  SELECT * INTO CORRESPONDING FIELDS OF TABLE LT_PACKAGE_LIST
     FROM UJD_PACKAGES2.                                "#EC CI_NOWHERE
  SORT LT_PACKAGE_LIST BY APPSET_ID ASCENDING APP_ID ASCENDING.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'              "#EC *
    EXPORTING
      DDIC_STRUCTURE  = 'UJD_PACKAGES2'
      RETFIELD        = 'APPSET_ID'
      WINDOW_TITLE    = 'Appset'
      VALUE_ORG       = 'S'
    TABLES
      VALUE_TAB       = LT_PACKAGE_LIST
      RETURN_TAB      = LT_RETURN
      DYNPFLD_MAPPING = LT_DYNPFLD
    EXCEPTIONS
      NO_VALUES_FOUND = 1
      PARAMETER_ERROR = 2.

  READ TABLE LT_RETURN INTO LS_RETURN
    WITH KEY FIELDNAME = 'APPSET_ID'.
  L_LS_PACKAGE-APPSET_ID = LS_RETURN-FIELDVAL.

  READ TABLE LT_RETURN INTO LS_RETURN
    WITH KEY FIELDNAME = 'APP_ID'.
  L_LS_PACKAGE-APP_ID = LS_RETURN-FIELDVAL.

  READ TABLE LT_RETURN INTO LS_RETURN
    WITH KEY FIELDNAME = 'TEAM_ID'.
  LS_PACKAGE-TEAM_ID = LS_RETURN-FIELDVAL.

  READ TABLE LT_RETURN INTO LS_RETURN
    WITH KEY FIELDNAME = 'GROUP_ID'.
  L_LS_PACKAGE-GROUP_ID = LS_RETURN-FIELDVAL.

  READ TABLE LT_RETURN INTO LS_RETURN
    WITH KEY FIELDNAME = 'PACKAGE_ID'.
  L_LS_PACKAGE-PACKAGE_ID = LS_RETURN-FIELDVAL.
ENDFORM.
***********************************************************************
****************F4_GET_PROMPT******************************************
FORM F4_GET_PROMPT.
  DATA:
    L_FILENAME      TYPE UJ_STRING,
    LT_ANSWERPROMPT TYPE STANDARD TABLE OF UJD_S_VALUE.

  CALL FUNCTION 'GUI_FILE_LOAD_DIALOG'
    IMPORTING
      FILENAME = L_FILENAME.

  CHECK L_FILENAME IS NOT INITIAL.

  CALL FUNCTION 'GUI_UPLOAD'
    EXPORTING
      FILENAME = L_FILENAME
      FILETYPE = 'DAT'
    TABLES
      DATA_TAB = LT_ANSWERPROMPT
    EXCEPTIONS
      OTHERS   = 1.

  CHECK SY-SUBRC EQ 0.

  DELETE LT_ANSWERPROMPT WHERE FIELDNAME IS INITIAL.

  CALL FUNCTION 'UJD_CONVERT_ITAB_TO_STRING'
    EXPORTING
      IT_CONTENT = LT_ANSWERPROMPT
    IMPORTING
      E_RESULT   = P_PROMPT.

ENDFORM.                    "f4_get_prompt
****************F4_GET_SCHEDULE******************************************
FORM F4_GET_SCHEDULE.
  DATA:
    LV_FILENAME TYPE UJ_STRING,
    LT_SCHEUDLE TYPE STRING_TABLE.

  CALL FUNCTION 'GUI_FILE_LOAD_DIALOG'
    IMPORTING
      FILENAME = LV_FILENAME.

  CHECK LV_FILENAME IS NOT INITIAL.

  CALL FUNCTION 'GUI_UPLOAD'
    EXPORTING
      FILENAME = LV_FILENAME
      FILETYPE = 'DAT'
    TABLES
      DATA_TAB = LT_SCHEUDLE
    EXCEPTIONS
      OTHERS   = 1.

  CHECK SY-SUBRC EQ 0.

  DELETE LT_SCHEUDLE WHERE TABLE_LINE IS INITIAL.

  READ TABLE LT_SCHEUDLE INTO P_SCHEDU INDEX 1.

ENDFORM.
****************CHECK INPUT******************************************
FORM CHECK_INPUT .
  IF P_SYNC IS INITIAL OR P_USER IS INITIAL OR P_PACKAG IS INITIAL OR
     P_FILE IS INITIAL OR                                   "frp270312
     P_APPSET IS INITIAL OR P_APPL IS INITIAL .
    MESSAGE 'Fill in all essential entry'  TYPE 'E'.        "#EC NOTEXT
  ENDIF.
ENDFORM.
****************SCOPE TO LAUNCH******************************************
FORM SCOPE_TO_LAUNCH.
*Select scope from table ZFSMT_T_SCPT_PRT according a flag wich says if the scope has been already processed
  SELECT PERIOD VERSION FROM ZFSMT_T_SCPT_PRT
  INTO TABLE LT_PROMPT
  WHERE FLAG = 'X'.
  IF SY-SUBRC = 0.
*Loop on the internal table which contains the result of the previous select
    LOOP AT LT_PROMPT ASSIGNING <FS_PROMPT>.
      LV_PROMPT_DYN = P_PROMPT.
      "This message can be see in SM37
      CLEAR LV_MESSAGE.
      CONCATENATE 'Execution was launched for '  P_PACKAG'-' <FS_PROMPT>-PERIOD '-' <FS_PROMPT>-VERSION '.' INTO LV_MESSAGE SEPARATED BY SPACE.
      MESSAGE LV_MESSAGE  TYPE 'I'.
      REPLACE ALL OCCURRENCES OF '%PERIOD%' IN LV_PROMPT_DYN WITH <FS_PROMPT>-PERIOD.
      REPLACE ALL OCCURRENCES OF '%VERSION%' IN LV_PROMPT_DYN WITH <FS_PROMPT>-VERSION.
      CALL FUNCTION 'LIST_FREE_MEMORY'.
      "Execute the standard program for each scope.
      "Use the paramater P_MSG = 'Y' to stop the program if there is an error. Useful in a process chain otherwise the program will continue if there is an error
      SUBMIT UJD_TEST_PACKAGE
            WITH IF_SYNC = P_SYNC
            WITH IF_FILE = P_FILE
            WITH USER = P_USER
            WITH PACKAGE = P_PACKAG
            WITH APPSET = P_APPSET
            WITH APPL = P_APPL
            WITH TEAM = P_TEAM
            WITH GROUP = P_GROUP
            WITH PROMPT = LV_PROMPT_DYN
            WITH SCHEDULE = P_SCHEDU
            WITH IF_MSG = P_MSG
            EXPORTING LIST TO MEMORY AND RETURN.
      "Write the result
      CALL FUNCTION 'LIST_FROM_MEMORY'
        TABLES
          LISTOBJECT = LT_LIST_TAB
        EXCEPTIONS
          NOT_FOUND  = 1
          OTHERS     = 2.
      IF SY-SUBRC = 0.
        CALL FUNCTION 'WRITE_LIST'
          TABLES
            LISTOBJECT = LT_LIST_TAB.
        IF SY-SUBRC = 0.
        ENDIF.
      ENDIF.
      "Delete scope in the table in the case where the flag which stops the program if there is an error is equal at Y.
      "IWe use this philosphy because if we delete scope each time and there is a problem we do not know which scope has been already processed
      IF P_MSG = 'Y'.
        CLEAR LS_RESULT.
        LS_RESULT-PERIOD = <FS_PROMPT>-PERIOD.
        LS_RESULT-VERSION = <FS_PROMPT>-VERSION.
        LS_RESULT-FLAG = ''.
        MODIFY ZFSMT_T_SCPT_PRT FROM LS_RESULT.
      ENDIF.

    ENDLOOP.
  ELSE.
    CLEAR LV_MESSAGE.
    LV_MESSAGE = 'SCOPE NOT FOUND'.
    MESSAGE LV_MESSAGE  TYPE 'I'.
  ENDIF.
ENDFORM.

* Package Name = CONVERSION_LC_EUR_VERSION_TIME
* Process Chain = /CPMB/FX_RESTATMENT
* PROMPT(SELECTINPUT,,,,"%CATEGORY_DIM%,%TIME_DIM%")
* TASK(/CPMB/FX_RESTATMENT_LOGIC,SUSER,%USER%)
* TASK(/CPMB/FX_RESTATMENT_LOGIC,SAPPSET,%APPSET%)
* TASK(/CPMB/FX_RESTATMENT_LOGIC,SAPP,%APP%)
* TASK(/CPMB/FX_RESTATMENT_LOGIC,SELECTION,%SELECTION%)
* TASK(/CPMB/FX_RESTATMENT_LOGIC,LOGICFILENAME,FXTRANS_BU23_SMART.LGF)

* FX Conversion Logic Script
*//BU23_SMART:FXTRANS_BU23_SMART.LGF
*//Support Only 1 version and 1 period per launch
*//Conversion from EURO to LC

*XDIM_MEMBERSET TIME = %TIME_SET%
*XDIM_MEMBERSET VERSION = %VERSION_SET%
*XDIM_MEMBERSET RPTCURRENCY = EUR
*LOOKUP Rates
	*DIM RATE : TIME=  %TIME_SET%
	*DIM RATE : VERSION= %VERSION_SET%
	*DIM RATE : R_ACCOUNT="CLO"
	*DIM RATE : R_ENTITY="Global"
	*DIM RATE : INPUTCURRENCY= OBS.CURRENCY
	*DIM RATE : MEASURES="PERIODIC"
*ENDLOOKUP
*WHEN RPTCURRENCY
	*IS EUR
				*REC(EXPRESSION=%VALUE%/LOOKUP(RATE), RPTCURRENCY="LC")	
*ENDWHEN
*COMMIT

Y
CONVERSION_LC_EUR_VERSION_TIME
APPSET_ID
APPSET
USER

CONVERSION
%SELECTION%#/APPSET_ID/MODEL/PRIVATEPUBLICATIONS/USER/TempFiles/FROM.TMP@@@SAVE@@@@@@EXPAND@@@|DIMENSION:TIME|%PERIOD%!DIMENSION:VERSION:%VERSION%
<SCHEDULING><IMMEDIATE>Y</IMMEDIATE><STATE>0</STATE><PERIOD>N</PERIOD></SCHEDULING>
Y
N
